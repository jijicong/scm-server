<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


<!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="config" class="org.trc.spring.TrPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config/${package.environment}/scm-jdbc.properties</value>
                <value>classpath:config/${package.environment}/comsumer-config.properties</value>
                <value>classpath:config/${package.environment}/trc.properties</value>
                <value>classpath:config/${package.environment}/redis.properties</value>
                <value>classpath:config/${package.environment}/config.properties</value>
                <value>classpath:config/${package.environment}/cron.properties</value>
                <value>classpath:config/${package.environment}/admin.properties</value>
            </list>
        </property>
        <property name="fileEncoding">
            <value>UTF-8</value>
        </property>
    </bean>
    <bean class="org.trc.framework.core.spring.SpringContextHolder" lazy-init="false"/>

    <!-- 本地提供服务 -->
    <import resource="classpath:zookeeper.xml"/>
    <import resource="classpath:consumer-beans.xml"/>
    <import resource="classpath:resource-tx.xml"/>
    <import resource="classpath:comsumer-config.xml"/>
    <import resource="classpath:redis-config.xml"/>

    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>


    <!-- 开启注解注入等 -->
    <context:annotation-config />
    <context:component-scan base-package="org.trc"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="36000" />
    </bean>

    <task:scheduler id="scheduler" pool-size="10" />
    <task:scheduled-tasks scheduler="scheduler" >
       <!-- <task:scheduled ref="retryBiz" method="brandUpdateNoticeRetry" cron="${retry.brand.start}"/>
        <task:scheduled ref="retryBiz" method="propertyUpdateNoticeRetry" cron="${retry.property.start}"/>
        <task:scheduled ref="retryBiz" method="categoryUpdateNoticeRetry" cron="${retry.category.start}"/>
        <task:scheduled ref="retryBiz" method="categoryBrandUpdateNoticeRetry" cron="${retry.categoryBrand.start}"/>
        <task:scheduled ref="retryBiz" method="categoryPropertyUpdateNoticeRetry" cron="${retry.categoryProperty.start}"/>-->
        <task:scheduled ref="retryBiz" method="itemUpdateNoticeRetry" cron="${retry.item.start}"/>
        <task:scheduled ref="retryBiz" method="externalItemUpdateNoticeRetry" cron="${retry.externalItem.start}"/>
        <task:scheduled ref="retryBiz" method="channelReceiveOrderSubmitResultRetry" cron="${retry.channelReceive.start}"/>
        <task:scheduled ref="retryBiz" method="sendLogisticsInfoToChannelRetry" cron="${retry.sendLogisticsInfo.start}"/>
        <task:scheduled ref="scmOrderBiz" method="fetchLogisticsInfo" cron="${fetch.logisticsInfo}"/>
        <task:scheduled ref="externalPictureBiz" method="uploadExternalPic" cron="${retry.external.picture.upload}"/>
        <task:scheduled ref="outBoundOrderBiz" method="updateOutboundDetail" cron="${warehouse.outbound.start}"/>
        <task:scheduled ref="outBoundOrderBiz" method="retryCancelOrder" cron="${warehouse.cancel.start}"/>
        <task:scheduled ref="warehouseNoticeBiz" method="updateStock" cron="${warehouse.notice.detail.query}"/>

        <task:scheduled ref="allocateOutOrderBiz" method="updateAllocateOutDetail" cron="${allocate.out.detail}"/>
        <task:scheduled ref="allocateInOrderBiz" method="updateAllocateInDetail" cron="${allocate.in.detail}"/>
        <task:scheduled ref="allocateInOrderBiz" method="retryCancelOrder" cron="${allocate.in.cancel}"/>
        <task:scheduled ref="allocateOutOrderBiz" method="retryCancelOrder" cron="${allocate.out.cancel}"/>
        <task:scheduled ref="warehouseNoticeBiz" method="retryCancelOrder" cron="${warehouse.notice.cancel}"/>
        <!-- 退货出库单取消中定时任务 -->
        <task:scheduled ref="purchaseOutboundNotice" method="retryCancelOrder" cron="${entry.return.cancel}"/> 
    </task:scheduled-tasks>

</beans>