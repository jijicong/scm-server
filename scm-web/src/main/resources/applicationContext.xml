<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


<!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="config" class="org.trc.spring.TrPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config/${package.environment}/scm-jdbc.properties</value>
                <value>classpath:config/${package.environment}/comsumer-config.properties</value>
                <value>classpath:config/${package.environment}/trc.properties</value>
                <value>classpath:config/${package.environment}/redis.properties</value>
                <value>classpath:config/${package.environment}/config.properties</value>
                <value>classpath:config/${package.environment}/cron.properties</value>
                <value>classpath:config/${package.environment}/admin.properties</value>
            </list>
        </property>
        <property name="fileEncoding">
            <value>UTF-8</value>
        </property>
    </bean>
    <bean class="org.trc.framework.core.spring.SpringContextHolder" lazy-init="false"/>

    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>


   <!-- <util:constant static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP"/>-->

    <!-- redis -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${session.pool.maxTotal}" />
        <property name="maxIdle" value="${session.pool.maxIdle}" />
        <property name="minIdle" value="${session.pool.minIdle}" />
        <property name="maxWaitMillis" value="${session.pool.maxWaitMillis}" />
        <property name="testOnBorrow" value="${session.pool.testOnBorrow}" />
        <property name="testOnReturn" value="${session.pool.testOnReturn}" />
    </bean>

    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${session.redis.host}"/>
        <property name="port" value="${session.redis.port}"/>
        <property name="password" value="${session.redis.password}"/>
        <property name="poolConfig" ref="jedisPoolConfig" />
        <property name="usePool" value="true" />
        <property name="timeout" value="${session.redis.timeout}" />
        <property name="database" value="${session.redis.database}" />


    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
    </bean>

    <bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="36000" />
    </bean>

    <!-- 本地提供服务 -->
    <import resource="classpath:zookeeper.xml"/>
    <import resource="classpath:consumer-beans.xml"/>
    <import resource="classpath:resource-tx.xml"/>
    <import resource="classpath:comsumer-config.xml"/>
    <import resource="classpath:redis-config.xml"/>

    <!--<mvc:annotation-driven conversion-service="conversionService" />
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">

    </bean>-->

    <!-- 开启注解注入等 -->
    <context:annotation-config />
    <context:component-scan base-package="org.trc"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <task:scheduler id="scheduler" pool-size="10" />
    <task:scheduled-tasks scheduler="scheduler" >
       <!-- <task:scheduled ref="retryBiz" method="brandUpdateNoticeRetry" cron="${retry.brand.start}"/>
        <task:scheduled ref="retryBiz" method="propertyUpdateNoticeRetry" cron="${retry.property.start}"/>
        <task:scheduled ref="retryBiz" method="categoryUpdateNoticeRetry" cron="${retry.category.start}"/>
        <task:scheduled ref="retryBiz" method="categoryBrandUpdateNoticeRetry" cron="${retry.categoryBrand.start}"/>
        <task:scheduled ref="retryBiz" method="categoryPropertyUpdateNoticeRetry" cron="${retry.categoryProperty.start}"/>-->
        <task:scheduled ref="retryBiz" method="itemUpdateNoticeRetry" cron="${retry.item.start}"/>
        <task:scheduled ref="retryBiz" method="externalItemUpdateNoticeRetry" cron="${retry.externalItem.start}"/>
        <task:scheduled ref="retryBiz" method="channelReceiveOrderSubmitResultRetry" cron="${retry.channelReceive.start}"/>
        <task:scheduled ref="retryBiz" method="sendLogisticsInfoToChannelRetry" cron="${retry.sendLogisticsInfo.start}"/>
        <task:scheduled ref="scmOrderBiz" method="fetchLogisticsInfo" cron="${fetch.logisticsInfo}"/>
        <!--<task:scheduled ref="externalPictureBiz" method="uploadExternalPic" cron="${retry.external.picture.upload}"/>-->

    </task:scheduled-tasks>

</beans>