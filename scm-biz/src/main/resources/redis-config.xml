<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">

    <!-- redis配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${session.pool.maxTotal}" />
        <property name="maxIdle" value="${session.pool.maxIdle}" />
        <property name="minIdle" value="${session.pool.minIdle}" />
        <property name="maxWaitMillis" value="${session.pool.maxWaitMillis}" />
        <property name="testOnBorrow" value="${session.pool.testOnBorrow}" />
        <property name="testOnReturn" value="${session.pool.testOnReturn}" />
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
        <constructor-arg name="host" value="${session.redis.host}"/>
    </bean>

    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${session.redis.host}"/>
        <property name="port" value="${session.redis.port}"/>
        <!--<property name="password" value="${session.redis.password}"/>-->
        <property name="poolConfig" ref="jedisPoolConfig" />
        <property name="usePool" value="true" />
        <property name="timeout" value="${session.redis.timeout}" />
        <property name="database" value="${session.redis.database}" />
    </bean>



    <!-- redis 序列化策略 ，通常情况下key值采用String序列化策略， -->
    <!-- 如果不指定序列化策略，StringRedisTemplate的key和value都将采用String序列化策略； -->
    <!-- 但是RedisTemplate的key和value都将采用JDK序列化 这样就会出现采用不同template保存的数据不能用同一个template删除的问题 -->
    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer" />

    <bean id='redisTemplate' class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer" ref="stringRedisSerializer" />
        <property name="hashKeySerializer" ref="stringRedisSerializer" />
    </bean>

    <cache:annotation-driven cache-manager="cacheManager" />

    <!-- spring自己的缓存管理器，这里定义了缓存位置名称 ，即注解中的value -->
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="template" ref="redisTemplate"/>
        <property name="defaultExpiration" value="3600000"></property><!--默认1000个小时过期-->
        <property name="expires">
            <map>
                <entry key="address" value="36000000"></entry><!--地址10000个小时过期-->
                <entry key="jd_address" value="36000000"></entry><!--京东地址10000个小时过期-->
            </map>
        </property>
    </bean>

    <bean id="redisCacheConfig" class="org.trc.util.RedisCacheConfig">
        <constructor-arg ref="jedisConnectionFactory"/>
        <constructor-arg ref="redisTemplate"/>
        <constructor-arg ref="cacheManager"/>
    </bean>

</beans>